<project name="common" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="common.dir" location="${basedir}/../../automation-build-common/common" />
	<property file="${common.dir}/build.properties" />
	<import file="${common.dir}/../test/test.xml"/>

	<property name="ivy.jar.dir" location="${wkspace.dir}/shared-lib/src/main/lib" />
	<property name="ivy.jar.file" location="${ivy.jar.dir}/ivy.jar" />

	<target name="load-ivy">
		<mkdir dir="${ivy.jar.dir}" />
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<path id="lib.path.id">
		<fileset dir="${lib.dir}" />
		<fileset dir="${test.lib.dir}" />
		<fileset dir="${project.lib.dir}" />
	</path>

	<!-- =================================
	      target: resolve
	     ================================= -->
	<target name="resolve" depends="load-ivy" description="--> resolve and retrieve dependencies with ivy">
		<ivy:settings file="${common.dir}/../ivysettings.xml" />
		<ivy:resolve file="${ivy.file}" />
		<ivy:retrieve pattern="${project.lib.dir}/[artifact]-[revision].[ext]" overwritemode="always"/>
	</target>

	<!-- =================================
          target: compile
         ================================= -->
	<target name="compile" depends="resolve" description="--> compile the project">
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${test.classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="lib.path.id" debug="true" includeAntRuntime="false" />
		<javac srcdir="${src.test.dir}" destdir="${classes.dir}" classpathref="lib.path.id" debug="true" includeAntRuntime="false" />
	</target>

	<!-- =================================
	          target: versioning
	    ================================= -->
	<target name="snapshot-version">
		<property name="ivy.new.revision" value="${module.version.target}-SNAPSHOT" />
		<echo message="version=${ivy.new.revision}" />
	</target>

	<!-- =================================
          target: jar
         ================================= -->
	<target name="jar" depends="compile" unless="target.webapps.dir" description="--> make a jar file for this project">
		<jar destfile="${jar.file}">
			<fileset dir="${classes.dir}"/>
			<fileset dir="${src.resources.dir}"/>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Build-Version" value="${module.version.target}" />
			</manifest>
		</jar>
		<copy todir="../../web-basic_sample/target/classes">
			<fileset dir="${projects.dir}/src/main/resources" />
		</copy>
	</target>

	<!-- =================================
          target: war
         ================================= -->
	<target name="war" depends="compile" if="target.webapps.dir">
		<mkdir dir="${build.target.dir}/webapp" />

		<copy todir="${target.webapps.dir}">
			<fileset dir="${projects.dir}/src/main/webapp" />
		</copy>
		<copy todir="${classes.dir}">
			<fileset dir="${projects.dir}/src/main/resources" />
		</copy>
		<war destfile="${war.file}" webxml="${target.webapps.dir}/WEB-INF/web.xml">
			<fileset dir="${target.webapps.dir}" />
			<classes dir="${classes.dir}" />
		</war>
	</target>

	<!-- =================================
	          target: publish-snapshot
	     ================================= -->
	<target name="publish-snapshot" depends="clean-target-dir, snapshot-version, jar" description="--> publish this project in the snapshot ivy repository">
		<echo message="${ant.project.name} publish-snapshot start" />
		<ivy:publish artifactspattern="${build.target.dir}/[artifact].[ext]" resolver="underDev" pubrevision="${ivy.new.revision}" status="integration" overwrite="true" />
	</target>

	<!-- =================================
          target: clean-build
         ================================= -->
	<target name="clean-target-dir" description="--> clean the project target dir's files">
		<echo message="${ant.project.name} clean-build start" />
		<delete includeemptydirs="true" dir="${build.target.dir}" />
	</target>
</project>